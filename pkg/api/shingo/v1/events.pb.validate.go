// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: events/v1/events.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Event) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EventMultiError, or nil if none found.
func (m *Event) ValidateAll() error {
	return m.validate(true)
}

func (m *Event) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.Content.(type) {

	case *Event_Object:

		if all {
			switch v := interface{}(m.GetObject()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "Object",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "Object",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_Binary:
		// no validation rules for Binary

	}

	if len(errors) > 0 {
		return EventMultiError(errors)
	}

	return nil
}

// EventMultiError is an error wrapping multiple validation errors returned by
// Event.ValidateAll() if the designated constraints aren't met.
type EventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventMultiError) AllErrors() []error { return m }

// EventValidationError is the validation error returned by Event.Validate if
// the designated constraints aren't met.
type EventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventValidationError) ErrorName() string { return "EventValidationError" }

// Error satisfies the builtin error interface
func (e EventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventValidationError{}

// Validate checks the field values on EmitRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EmitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmitRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EmitRequestMultiError, or
// nil if none found.
func (m *EmitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EmitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SubscriberId

	// no validation rules for Topic

	if all {
		switch v := interface{}(m.GetEvent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EmitRequestValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EmitRequestValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EmitRequestValidationError{
				field:  "Event",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EmitRequestMultiError(errors)
	}

	return nil
}

// EmitRequestMultiError is an error wrapping multiple validation errors
// returned by EmitRequest.ValidateAll() if the designated constraints aren't met.
type EmitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmitRequestMultiError) AllErrors() []error { return m }

// EmitRequestValidationError is the validation error returned by
// EmitRequest.Validate if the designated constraints aren't met.
type EmitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmitRequestValidationError) ErrorName() string { return "EmitRequestValidationError" }

// Error satisfies the builtin error interface
func (e EmitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmitRequestValidationError{}

// Validate checks the field values on EmitResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EmitResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmitResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EmitResponseMultiError, or
// nil if none found.
func (m *EmitResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EmitResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EmitResponseMultiError(errors)
	}

	return nil
}

// EmitResponseMultiError is an error wrapping multiple validation errors
// returned by EmitResponse.ValidateAll() if the designated constraints aren't met.
type EmitResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmitResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmitResponseMultiError) AllErrors() []error { return m }

// EmitResponseValidationError is the validation error returned by
// EmitResponse.Validate if the designated constraints aren't met.
type EmitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmitResponseValidationError) ErrorName() string { return "EmitResponseValidationError" }

// Error satisfies the builtin error interface
func (e EmitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmitResponseValidationError{}

// Validate checks the field values on SubscribeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SubscribeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscribeRequestMultiError, or nil if none found.
func (m *SubscribeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Topic

	if len(errors) > 0 {
		return SubscribeRequestMultiError(errors)
	}

	return nil
}

// SubscribeRequestMultiError is an error wrapping multiple validation errors
// returned by SubscribeRequest.ValidateAll() if the designated constraints
// aren't met.
type SubscribeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeRequestMultiError) AllErrors() []error { return m }

// SubscribeRequestValidationError is the validation error returned by
// SubscribeRequest.Validate if the designated constraints aren't met.
type SubscribeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeRequestValidationError) ErrorName() string { return "SubscribeRequestValidationError" }

// Error satisfies the builtin error interface
func (e SubscribeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeRequestValidationError{}

// Validate checks the field values on SubscriptionEvent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SubscriptionEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscriptionEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscriptionEventMultiError, or nil if none found.
func (m *SubscriptionEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscriptionEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.Event.(type) {

	case *SubscriptionEvent_OnSubscribe:

		if all {
			switch v := interface{}(m.GetOnSubscribe()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubscriptionEventValidationError{
						field:  "OnSubscribe",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubscriptionEventValidationError{
						field:  "OnSubscribe",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOnSubscribe()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubscriptionEventValidationError{
					field:  "OnSubscribe",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SubscriptionEvent_OnMessage:

		if all {
			switch v := interface{}(m.GetOnMessage()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubscriptionEventValidationError{
						field:  "OnMessage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubscriptionEventValidationError{
						field:  "OnMessage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOnMessage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubscriptionEventValidationError{
					field:  "OnMessage",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SubscriptionEventMultiError(errors)
	}

	return nil
}

// SubscriptionEventMultiError is an error wrapping multiple validation errors
// returned by SubscriptionEvent.ValidateAll() if the designated constraints
// aren't met.
type SubscriptionEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscriptionEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscriptionEventMultiError) AllErrors() []error { return m }

// SubscriptionEventValidationError is the validation error returned by
// SubscriptionEvent.Validate if the designated constraints aren't met.
type SubscriptionEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscriptionEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscriptionEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscriptionEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscriptionEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscriptionEventValidationError) ErrorName() string {
	return "SubscriptionEventValidationError"
}

// Error satisfies the builtin error interface
func (e SubscriptionEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscriptionEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscriptionEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscriptionEventValidationError{}

// Validate checks the field values on OnSubscribeEvent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OnSubscribeEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OnSubscribeEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OnSubscribeEventMultiError, or nil if none found.
func (m *OnSubscribeEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *OnSubscribeEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SubscriberId

	if len(errors) > 0 {
		return OnSubscribeEventMultiError(errors)
	}

	return nil
}

// OnSubscribeEventMultiError is an error wrapping multiple validation errors
// returned by OnSubscribeEvent.ValidateAll() if the designated constraints
// aren't met.
type OnSubscribeEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OnSubscribeEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OnSubscribeEventMultiError) AllErrors() []error { return m }

// OnSubscribeEventValidationError is the validation error returned by
// OnSubscribeEvent.Validate if the designated constraints aren't met.
type OnSubscribeEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OnSubscribeEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OnSubscribeEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OnSubscribeEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OnSubscribeEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OnSubscribeEventValidationError) ErrorName() string { return "OnSubscribeEventValidationError" }

// Error satisfies the builtin error interface
func (e OnSubscribeEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOnSubscribeEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OnSubscribeEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OnSubscribeEventValidationError{}

// Validate checks the field values on OnMessageEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OnMessageEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OnMessageEvent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OnMessageEventMultiError,
// or nil if none found.
func (m *OnMessageEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *OnMessageEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEvent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OnMessageEventValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OnMessageEventValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OnMessageEventValidationError{
				field:  "Event",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OnMessageEventMultiError(errors)
	}

	return nil
}

// OnMessageEventMultiError is an error wrapping multiple validation errors
// returned by OnMessageEvent.ValidateAll() if the designated constraints
// aren't met.
type OnMessageEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OnMessageEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OnMessageEventMultiError) AllErrors() []error { return m }

// OnMessageEventValidationError is the validation error returned by
// OnMessageEvent.Validate if the designated constraints aren't met.
type OnMessageEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OnMessageEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OnMessageEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OnMessageEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OnMessageEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OnMessageEventValidationError) ErrorName() string { return "OnMessageEventValidationError" }

// Error satisfies the builtin error interface
func (e OnMessageEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOnMessageEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OnMessageEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OnMessageEventValidationError{}

// Validate checks the field values on UnsubscribeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnsubscribeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnsubscribeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnsubscribeRequestMultiError, or nil if none found.
func (m *UnsubscribeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnsubscribeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SubscriberId

	// no validation rules for Topic

	if len(errors) > 0 {
		return UnsubscribeRequestMultiError(errors)
	}

	return nil
}

// UnsubscribeRequestMultiError is an error wrapping multiple validation errors
// returned by UnsubscribeRequest.ValidateAll() if the designated constraints
// aren't met.
type UnsubscribeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnsubscribeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnsubscribeRequestMultiError) AllErrors() []error { return m }

// UnsubscribeRequestValidationError is the validation error returned by
// UnsubscribeRequest.Validate if the designated constraints aren't met.
type UnsubscribeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnsubscribeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnsubscribeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnsubscribeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnsubscribeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnsubscribeRequestValidationError) ErrorName() string {
	return "UnsubscribeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnsubscribeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnsubscribeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnsubscribeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnsubscribeRequestValidationError{}

// Validate checks the field values on UnsubscribeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnsubscribeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnsubscribeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnsubscribeResponseMultiError, or nil if none found.
func (m *UnsubscribeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnsubscribeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UnsubscribeResponseMultiError(errors)
	}

	return nil
}

// UnsubscribeResponseMultiError is an error wrapping multiple validation
// errors returned by UnsubscribeResponse.ValidateAll() if the designated
// constraints aren't met.
type UnsubscribeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnsubscribeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnsubscribeResponseMultiError) AllErrors() []error { return m }

// UnsubscribeResponseValidationError is the validation error returned by
// UnsubscribeResponse.Validate if the designated constraints aren't met.
type UnsubscribeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnsubscribeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnsubscribeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnsubscribeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnsubscribeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnsubscribeResponseValidationError) ErrorName() string {
	return "UnsubscribeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnsubscribeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnsubscribeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnsubscribeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnsubscribeResponseValidationError{}
